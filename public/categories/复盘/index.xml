<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>复盘 on Wearry&#39;s Blog</title>
    <link>http://localhost:1313/blog/categories/%E5%A4%8D%E7%9B%98/</link>
    <description>Recent content in 复盘 on Wearry&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Wearry &gt;_ 2023</copyright>
    <lastBuildDate>Mon, 30 Jul 2018 08:38:56 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/categories/%E5%A4%8D%E7%9B%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>记NOI2018</title>
      <link>http://localhost:1313/blog/posts/noi2018/</link>
      <pubDate>Mon, 30 Jul 2018 08:38:56 +0000</pubDate>
      <guid>http://localhost:1313/blog/posts/noi2018/</guid>
      <description>Day -1 上午在家无所事事, 收了下行李, 下午就到洋湖报到去了, 然后听说笔试时间调整到了上午, 感觉有点慌整个晚上都在背笔试.&#xA;Day 0 上午考笔试, 比预料中的简单很多, 没有什么快捷键之类的坑题也没有挂分, 试机就打了一个最简单的配置就跑了.&#xA;下午找了一间教室自习, 不知道干什么, 晚上懒得复习什么早早地睡了, 奇怪的是居然丝毫不紧张.&#xA;Day 1 第一试, 看了看题, 觉得题意都挺好理解的, 难度也基本按照题目顺序.&#xA;就直接开始写T1了, 写完 \(\log^2\) 过了大样例直接丢到一边了, 然后看T2, 推了一个看起来有理有据的结论, 但不是很会算答案搞了很久大样例四个全错, 想了一下随便打了个特判过了其中两个, 又改了一下特判才在考试一半时间的时候过了大样例.&#xA;期间去上了一个厕所, 用掉20min&amp;hellip;&#xA;看T3惊喜地发现68分没啥难度, 飞快地码完过了大样例还有一个半小时, 正准备回去继续做T2最后20分的时候发现T1可能跑不过, 卡了很久的常, 期间竟然检查出好多致命的错误, 然后心里特别虚地不停检查, T2也没有继续想了.&#xA;好在最后并没有挂分.&#xA;Day 1.5 鸽了社会活动, 在自习室打出了防沉迷警告&amp;hellip;&#xA;Day 2 看完题目一直在想哪道题最简单, 然后T1补充了一个条件&amp;hellip;&#xA;用了两个小时都没有从T1的倒数第二步推出最后一步, 想想当时可能真的受到了降智打击, 还自信地觉得T2比较可做, 码了很久发现是假算法, 感觉很慌跑去写T3暴力, 回来想先写T2的45分又不想放弃T1, 最后连T2的45分都没拿到&amp;hellip;&#xA;感觉心态很崩, 虽然最后查分发现意外的多了5分(大雾).&#xA;总结 好像不知从什么时候开始, 身上一直有某种二试Debuff存在, 可能经常性的因为第一试考得不错, 而对多数情况下更难的二试心存轻视, 也没能调整好自己的心态吧.&#xA;不管怎样, 接下来的OI生涯, 要更加珍惜!</description>
    </item>
    <item>
      <title>写在NOIP2017之后</title>
      <link>http://localhost:1313/blog/posts/after-noip-2017/</link>
      <pubDate>Mon, 13 Nov 2017 08:24:59 +0000</pubDate>
      <guid>http://localhost:1313/blog/posts/after-noip-2017/</guid>
      <description>比赛过程 Day1 T1一眼没有想出来, 心里还是有点虚, 认真地读完了后面两题平复了一下心态. 想着既然是T1应该不会太难, 看着样例找了找规律, 推了个 \(a + b + (b \bmod a) (a \lt b)\) 的方法, 发现过不了大样例. 于是盯着大样例发呆, 突然发现了世界的奥秘. 然后写T2, 写完眼查了一下大样例, 正要关闭窗口的时候习惯性 diff 了一下, 发现自己大小写写错一大堆&amp;hellip; T3想了想写了个不考虑零边的记忆化搜索, 发现大样例过不了. 认真思考了一下发现是没有考虑到达终点又折返的情况, 又想了想发现 -1 挺好判的, 就加上了.&#xA;Day2 到达考场时精神状态不太好, 意识模糊地打开了题目. 看完T2一直在想MST什么的, 感觉不太会做准备放弃时发现数据范围只有12, 于是秒懂了. T3没想多久推出一个平衡树的做法, 对自己代码能力过于自信没有多想就开始写, 结果调到最后一刻还是GG了.&#xA;反思错误 感觉这次虽然题目比较奇怪, 但实际难度还是合理的, 出现了一些失误恰恰暴露出身上的一些问题.&#xA;考试的时候大部分处在一种边想边写的状态, 一边写可能还要一边完善一些细节. 刷了很多奇怪的考察思维的题目之后, 写数据结构的代码能力退化明显. 考场的 debuff 比较强. 可能后面两条还稍微可以接受吧, 但是第一条的确是硬伤, 这样做简单题或者在比较清醒的时候写题可能还好, 然而一旦遇到代码实现比较复杂或者条件比较多的题目, 就会挂得很惨, 这个问题模拟赛中也出现过几次. 解决的策略其实说起来也不难, 主要就是每道题写之前把算法细节考虑基本清楚, 做到 Think twice, Code once 吧. 这样也不会出现某道题写了很久最后发现做法是错误的这种尴尬的情况也能够避免写一些特别复杂的做法.</description>
    </item>
  </channel>
</rss>
