<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wearry&#39;s Blog</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content on Wearry&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Wearry &gt;_ 2023</copyright>
    <lastBuildDate>Fri, 26 Apr 2024 16:48:45 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    
    
        <item>
        <title>倒带</title>
        <link>http://localhost:1313/blog/posts/rewind/</link>
        <pubDate>Fri, 26 Apr 2024 16:48:45 +0800</pubDate>
        
        <guid>http://localhost:1313/blog/posts/rewind/</guid>
        <description>Wearry&#39;s Blog http://localhost:1313/blog/posts/rewind/ -&lt;h2 id=&#34;i&#34;&gt;I&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一切有为法，如梦幻泡影，如露亦如电，应作如是观。&lt;/p&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;《金刚经》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ii&#34;&gt;II&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;iii&#34;&gt;III&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;iv&#34;&gt;IV&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;v&#34;&gt;V&lt;/h2&gt;
&lt;hr&gt;
- http://localhost:1313/blog/posts/rewind/ - Wearry &gt;_ 2023</description>
        </item>
    
    
    
        <item>
        <title>落幕回响</title>
        <link>http://localhost:1313/blog/posts/echo/</link>
        <pubDate>Wed, 12 Jul 2023 16:50:00 +0800</pubDate>
        
        <guid>http://localhost:1313/blog/posts/echo/</guid>
        <description>Wearry&#39;s Blog http://localhost:1313/blog/posts/echo/ -&lt;h2 id=&#34;壹-燕园的十七个瞬间&#34;&gt;壹·燕园的十七个瞬间&lt;/h2&gt;
&lt;p&gt;大抵记忆是个低维空间吧，不然为何在记忆里搜寻到的关于这段经历的投影，只剩下了一个又一个瞬间呢？
好在这样的逼近不算太坏，依然留下那些最强烈、最深刻的情感，依然在回忆涌起时，再次与某个过去的瞬间产生共鸣。&lt;/p&gt;
&lt;p&gt;我想起那些平凡美好的瞬间，想起树荫下猫咪的呵欠和肚子柔软的触感，想起出神时教室窗外那满墙的爬山虎，
还想起园子里不期而遇的一丛丛野花、一片片落叶，想起晚风吹拂下湖面荡开的、映着塔影的涟漪；&lt;/p&gt;
&lt;p&gt;我怀念并肩共同历经的瞬间，怀念一起挥洒的汗水，怀念一起被早八、Deadline追赶的日子，
怀念把酒言欢、畅谈过往与未来的激昂，也怀念失意萧索时的倾听与陪伴；&lt;/p&gt;
&lt;p&gt;我记得牵手一起走过的瞬间，记得望向你时默契交汇的视线，记得冬夜里手心的温度, 记得一起头顶璀璨星河、身披灿烂霞光，记得那些笑与泪；&lt;/p&gt;
&lt;p&gt;我难忘独自探索迷茫的瞬间，难忘熙攘人流中匆匆的身影，难忘静夜里的一盏孤灯，更难忘梦里浮现的符号公式，难忘未名湖底的明月&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;贰-世界于此展开&#34;&gt;贰·世界于此展开&lt;/h2&gt;
&lt;p&gt;要结束一段旅程的时候，总不自觉想要问自己，这段经历中我最主要的收获是什么？&lt;/p&gt;
&lt;p&gt;我想大概不是那些课程里所学的内容，尽管修了快两百学分，当了快三年的考试周守门员，
也曾顶着新冠的高烧算视线内所有闭曲线的基本群，但多数知识都以及退化成脑海中某个模糊的名词，
只占据很小一部分的脑容量了；大概也不能说是遇到的人们，尽管收获了无数珍贵的情谊，
作为学生、同窗和助教帮助过许多人的同时也受到许多人的帮助，共度过许多美好的时光，
但人生的旅途总是有不断的相遇与别离，只好默默期待生命中的下一个路口，再度重相逢。&lt;/p&gt;
&lt;p&gt;这一切在心底留下的东西究竟是什么呢？或许，是它们共同构成的，更广阔的世界。&lt;/p&gt;
&lt;h3 id=&#34;山的那边-还是山&#34;&gt;山的那边，还是山&lt;/h3&gt;
&lt;p&gt;我了解到了更广的知识，看见教科书上，一代又一代前辈毕生奉献的努力，不过浓缩成零星篇章里的只言片语，
也体会随着认识的深入，比起感受到自己知道了什么，更多的时候意识到的是自己的无知。&lt;/p&gt;
&lt;p&gt;敬畏于人类知识体系的庞杂繁复的同时，也又一次想起东邪西毒里的那句「山的那边，还是山」。
也许山终究是攀登不完的，但当山顶在脚下时，更远的视线和远处更高的山峰，也更显露出更加广阔和真实的世界。&lt;/p&gt;
&lt;h3 id=&#34;自由与理想之歌&#34;&gt;自由与理想之歌&lt;/h3&gt;
&lt;p&gt;我还结识了更多的人，他们志趣各异，在不同的领域发光发热，
或学识渊博，引经据典使课堂妙趣横生；或热心服务，活跃于各类活动会场；
或多才多艺，将美的体验带给更多人；或擅于竞技(&lt;del&gt;电子或非电子&lt;/del&gt;)，在比赛场上展露个人风采；
或坚定不移，朝既定目标持续努力；或捍卫自由，用行动为学生们的权益发声&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;我在他们的身上看见了两样东西，一曰理想——正因此才对某种事物充满着热爱与激情，
去努力追求——人也应该学着&lt;a href=&#34;https://en.wikipedia.org/wiki/Ring_(mathematics)&#34;&gt;环&lt;/a&gt;的样子，至少有平凡的理想，否则与咸鱼何异也？
一曰自由，我看见不被设限的人生，看见生命的无限可能性，
看见有无数不同的美好值得去追求，看见差异被包容后不同追求的个体一同前行。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;叁-关于宇宙-人生以及任何事情的终极答案&#34;&gt;叁·关于宇宙、人生以及任何事情的终极答案&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;How many roads must a man walk down&lt;/p&gt;
&lt;p&gt;Before you call him a man?&lt;/p&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;The answer, my friend, is blowin&amp;rsquo; in the wind&lt;/p&gt;
&lt;p&gt;The answer is blowin&amp;rsquo; in the wind&lt;/p&gt;
&lt;p&gt;&amp;mdash;&amp;mdash; Bob Dylon, &lt;em&gt;Blowin&amp;rsquo; in the wind&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;忘记从什么时候开始，一直在寻找关于所谓终极命题的答案，我问过许多人，也得到过不少答案。&lt;/p&gt;
&lt;h3 id=&#34;灿若流星&#34;&gt;灿若流星&lt;/h3&gt;
&lt;p&gt;一个我很喜欢的答案如是说：「流星划破天际只是短短一瞬，但就在那一瞬，它已将自己的灿烂留在夜空中」。&lt;/p&gt;
&lt;p&gt;尽管这个答案并没有完全解答我的困惑，在无数彷徨的夜晚，我却总想到它，也想到李太白和苏东坡，
于是不安的心能看到更远大的时空、跳出当下的桎梏。&lt;/p&gt;
&lt;h3 id=&#34;解构理想主义&#34;&gt;解构理想主义&lt;/h3&gt;
&lt;p&gt;思考答案的过程也反过来作用在了我自己的身上，早先的时候我大概有些过于理想主义，
凡事都追求一种圆满和完美。想来思考这个问题的答案也大概出于希望人生也应该完备的想法。&lt;/p&gt;
&lt;p&gt;然而这样的追求逐渐被打破了，Gödel、Kant、Turing 等人分别给我上了课，
让我明白有些事情不可能达到理想中的圆满，不只是做得还不够，而是这个世界的游戏规则不允许；
另外一群 &lt;del&gt;叫不出名字的&lt;/del&gt; 生物学家、心理学家和社会学家们也从旁佐证，某些角度上说，人类只是一群穿衣服的猴子。&lt;/p&gt;
&lt;p&gt;虽然不知道猴子会不会思考猴生的意义这样的问题，我还是一度有些沮丧，像是失去了什么东西。
重新开始思考根本的追求时，偶然读到的《禅与摩托车维修艺术》给了我新的火种，这火种在之后不断燃烧，
在心中散发出这样的光：&lt;/p&gt;
&lt;p&gt;也许人与人之间无法根本上互相理解，但相似的对共同美好的追求总将我们联系起来；&lt;/p&gt;
&lt;p&gt;可能认识世界始终是个伪命题，但简洁、完备而优美的结果一定会在不同地方反复出现；&lt;/p&gt;
&lt;p&gt;尽管在无限大的宇宙时空尺度下，人类是如此渺小，但总有小处值得去make a difference，总能在不同的地方闪耀属于人类的光辉。&lt;/p&gt;
&lt;h3 id=&#34;未知生-焉知死&#34;&gt;未知生，焉知死&lt;/h3&gt;
&lt;p&gt;后来听到了另一个印象深刻的答案，「如果你经历足够多，也许能自己找到答案」。
我想起孔子对子路说的话——未知生，焉知死——多么相似的奥卡姆剃刀式的答案，
彼时读《论语》没能理解它的意思，此刻心中的答案却逐渐清晰。&lt;/p&gt;
&lt;p&gt;每个人都将会有自己的答案，又或者答案是什么并不重要，非要有的话，我想42很适合。&lt;/p&gt;
- http://localhost:1313/blog/posts/echo/ - Wearry &gt;_ 2023</description>
        </item>
    
    
    
        <item>
        <title>博客搬迁</title>
        <link>http://localhost:1313/blog/posts/new-blog/</link>
        <pubDate>Wed, 05 Jul 2023 14:53:00 +0800</pubDate>
        
        <guid>http://localhost:1313/blog/posts/new-blog/</guid>
        <description>Wearry&#39;s Blog http://localhost:1313/blog/posts/new-blog/ -&lt;h3 id=&#34;new-features&#34;&gt;New Features&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;现在可以用Org Mode愉快地写Blog&lt;/li&gt;
&lt;li&gt;支持封面图片&lt;/li&gt;
&lt;li&gt;支持嵌入网e云播放器和Youtube视频页面&lt;/li&gt;
&lt;/ol&gt;
  &lt;iframe style=&#34;max-width: 100%&#34;
      class=&#34;music163&#34;
      frameborder=&#34;no&#34;
      border=&#34;0&#34;
      marginwidth=&#34;0&#34;
      marginheight=&#34;0&#34;
      width=&#34;330&#34;
      height=&#34;86&#34;
      src=&#34;//music.163.com/outchain/player?type=2&amp;id=25542198&amp;auto=0&amp;height=66&#34;&gt;
    &lt;/iframe&gt;


    
    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/kMCSMrnVsek?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h3 id=&#34;施工进度&#34;&gt;施工进度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Favicon&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; MathJax Support&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Comment System&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Personal Info Page&lt;/li&gt;
&lt;/ul&gt;
- http://localhost:1313/blog/posts/new-blog/ - Wearry &gt;_ 2023</description>
        </item>
    
    
    
        <item>
        <title>零落碎笔</title>
        <link>http://localhost:1313/blog/posts/pieces-of-memories/</link>
        <pubDate>Sun, 13 Sep 2020 10:03:09 +0000</pubDate>
        
        <guid>http://localhost:1313/blog/posts/pieces-of-memories/</guid>
        <description>Wearry&#39;s Blog http://localhost:1313/blog/posts/pieces-of-memories/ -&lt;h2 id=&#34;夏日&#34;&gt;夏日&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;7月底的某个午后，在炙烤的烈日下和单调的蝉声里，我补完了《EVA》的TV版和旧剧场版，随后默默将新剧版移出列表。
就像剧中真嗣拒绝了最后的补完一样，我也拒绝了对新剧版的“补完”。已经曲终人散的故事不需要重新来过，就让那绕梁的余音再多停留一会儿吧。&lt;/p&gt;
&lt;p&gt;后来不知道在什么地方看到了贺炜说的话
“&amp;hellip;我想真正的成熟应该并不是追求完美，而是直面自己的缺憾，这才是生活的本质。罗曼罗兰说过的，这个世上只有一种真正的英雄主义，那就是认清生活的真相，并且仍然热爱他&amp;hellip;”，
倏忽间许多剧中的隐喻的迷雾也消散了。&lt;/p&gt;
&lt;p&gt;于是夏日就在这蝉鸣之间不觉过去了。&lt;/p&gt;
&lt;h2 id=&#34;逃离&#34;&gt;逃离&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;逃离城市的热闹与喧嚣的方式或许很多，但对我而言最直接的方式就是从空间上真正远离。&lt;/p&gt;
&lt;p&gt;过去的一轮冬春夏秋里，都有在老宅的度过的时光：在无名芬芳里，我曾沿着历史的长河逆流而上，在那蜿蜒曲折、川流不息的轨迹里寻觅熟悉的踪迹；
也曾在点点星光下抬头仰望，敬畏着遥远时空外的浩瀚无垠；或是深入微风下浪一般涌动的稻田，透过层叠的稻叶一窥虫儿的世界。&lt;/p&gt;
&lt;p&gt;窗外鸟儿的低语打断我的思绪，似乎也预示着逃离的结束，钢筋水泥的丛林里可没有这样的故事。&lt;/p&gt;
&lt;h2 id=&#34;城游&#34;&gt;城游&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;粗略一算，这段特殊的时间，跨度之长，已接近过去好多年的总和。&lt;/p&gt;
&lt;p&gt;重新踏上新街旧巷，像是久别重逢的老友。沿着7年前的方向，恍惚间，我填平时间沟壑的妄想似乎也得以暂时成立。&lt;/p&gt;
&lt;p&gt;路过一个又一个熟悉的街口，整理脑中已经陌生的记忆，将他们对应在一起。就像是将思绪的碎片以现实的坐标拼接起来，重新得到记忆的地图。&lt;/p&gt;
&lt;p&gt;于是沿着这地图的指示，我再次窥见过去的自己。&lt;/p&gt;
&lt;h2 id=&#34;梧桐雨&#34;&gt;梧桐雨&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;秋雨里的法国梧桐，总莫名让我想起“梧桐更兼细雨”的意境来，虽说法国梧桐并不是梧桐，气氛也没有那么凄冷。&lt;/p&gt;
&lt;p&gt;想起高中门前那条种满法桐的路了，多少个日夜朝夕，从茂密的桐荫下走过的我大概不会想到，如今的我已只能在记忆里看见当时的场景了。&lt;/p&gt;
&lt;p&gt;生命中许多人，他们也就像这梧桐，在路过你生命的时候为你提供短暂的荫蔽，
而当你经过他们，他们也消失在你视野之外时，就只能留下淡漠的回忆和无力的惋惜而已。&lt;/p&gt;
&lt;p&gt;写这段话的时候大概理解了几分“悲欢离合总无情”，之前只知道这一句，
摘录全文在这里作为收尾好了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;少年听雨歌楼上，红烛昏罗帐。&lt;/p&gt;
&lt;p&gt;壮年听雨客舟中，江阔云低，断雁叫西风。&lt;/p&gt;
&lt;p&gt;而今听雨僧庐下，鬓已星星也。&lt;/p&gt;
&lt;p&gt;悲欢离合总无情，一任阶前，点滴到天明。&lt;/p&gt;
&lt;p&gt;——蒋捷《虞美人·听雨》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;写这篇文章的时候，正好是一个旧的阶段将要过去，新的旅途尚未开始的时候，混乱的记忆和杂糅的情感不断交织，希望利用这碎笔的形式一吐心中积郁。
然而实在太久没有写点什么的尝试了，我浅薄的笔力已经无法驾驭乱飘的思绪，只好任其裹挟，零落不已。
而这样吐露式的尝试并不能将复杂的心绪重新梳理，于是有这段后记。&lt;/p&gt;
&lt;p&gt;以当下的状态回望彼时的心境，感到积郁的缘由无非以下种种：在寒假开始之前，犯了一些错误，也相应的付出了一些代价；
加上疫情期间隔离在家的某种压抑感，让情绪在心中积累、发酵；好不容易调整之后突然又到了分别之时&amp;hellip;&lt;/p&gt;
&lt;p&gt;细细梳理下来，发现也没有多么难以面对，无非是这些东西缠在一起，像一团乱麻让人无从下手。而当它们被抽丝剥茧一样样梳理出来时，我好像也变得释然了。&lt;/p&gt;
&lt;p&gt;整个的这段特殊时期，就像是一次长假，仿佛无形的手按下了暂停，于是不顺心的事情全部抛诸脑后，停下来，休息调整。
幸运的是，尽管经历诸多波折，在这个假期里还是遇到了许多对我意义重大的人和事，与我共同面对，共同克服，我也总算在长假的尾声中重整了自己的心绪。
至于现在，无形的手又一次按下播放，我将重新开始着眼未来，面对前方未知的道路。过去的情绪就让它们留在过去的时空吧，轻装上阵的我多带任何一点都会成为累赘的。&lt;/p&gt;
- http://localhost:1313/blog/posts/pieces-of-memories/ - Wearry &gt;_ 2023</description>
        </item>
    
    
    
        <item>
        <title>Cryptography Notes</title>
        <link>http://localhost:1313/blog/posts/cryptography/</link>
        <pubDate>Tue, 07 Jul 2020 21:37:14 +0000</pubDate>
        
        <guid>http://localhost:1313/blog/posts/cryptography/</guid>
        <description>Wearry&#39;s Blog http://localhost:1313/blog/posts/cryptography/ -&lt;p&gt;Some notes of 🔒 cryptography lessons&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Reconstruct the architecture of this post&lt;/li&gt;
&lt;li&gt;Complete other contents
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; I: Pseudorandomness&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; II: Cipher&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; III: MAC&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; IV: Attack &amp;amp; Security&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; V: Public-key Cryptography&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;preliminary-fundamental-discrete-probability&#34;&gt;&lt;em&gt;Preliminary: Fundamental Discrete Probability&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;Suppose $U$ is a finite set.&lt;/p&gt;
&lt;h2 id=&#34;probability-distribution&#34;&gt;&lt;em&gt;Probability Distribution&lt;/em&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;a &lt;code&gt;probability distribution&lt;/code&gt; $P$ over $U$ is a function
$$P: U \rightarrow [0,1]$$
s.t.
$$\sum_{x \in U} P(x) = 1$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uniform distribution: $\forall x \in U, P(x) = \dfrac{1}{|U|}$&lt;/li&gt;
&lt;li&gt;Pointed distribution: $\exists x \in U, P(x) = 1$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;event&#34;&gt;&lt;em&gt;Event&lt;/em&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;an &lt;code&gt;event&lt;/code&gt; is a subset $E$ of $U$, define the probability of $E$ under &lt;code&gt;probability distribution&lt;/code&gt; $P$ as below:
$$Pr[E] = \sum_{x \in E} P(x)$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;the-union-bound&#34;&gt;&lt;em&gt;The Union Bound&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;By definition, we can obviously get:&lt;/p&gt;
&lt;p&gt;$$Pr[A_1 \cap A_2] + Pr[A_1 \cup A_2] = Pr[A_1] + Pr[A_2]$$&lt;/p&gt;
&lt;p&gt;Which also implies that:&lt;/p&gt;
&lt;p&gt;$$Pr[A_1 \cup A_2] \le Pr[A_1] + Pr[A_2]$$&lt;/p&gt;
&lt;h2 id=&#34;random-variable&#34;&gt;&lt;em&gt;Random Variable&lt;/em&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;a &lt;code&gt;random variable&lt;/code&gt; $X$ is a function
$$X:U \rightarrow V$$
where $V$ is &lt;strong&gt;range&lt;/strong&gt; of $X$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
X:{0, 1}^n \rightarrow {0, 1} \
X(b) = LSB(b) \in {0, 1}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;As you can see, &lt;code&gt;random variable&lt;/code&gt; $X$ can also induce &lt;code&gt;probability distribution&lt;/code&gt; from $U$ to $V$ (Suppose $P$ is a distribution on $U$):&lt;/p&gt;
&lt;p&gt;$$
\forall v \in V, Q(v) = Pr[X = v] = Pr[X^{-1}(v)]
$$&lt;/p&gt;
&lt;h3 id=&#34;uniform-random-variable&#34;&gt;&lt;em&gt;Uniform Random Variable&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Specially, when $P$ is uniform distribution and $X(r) = r$ for all $r \in U$, then:&lt;/p&gt;
&lt;p&gt;$$
\forall r \in U, Pr[X = r] = \frac{1}{|U|}
$$&lt;/p&gt;
&lt;p&gt;this is called &lt;code&gt;uniform random variable&lt;/code&gt;, denoted by $X \xleftarrow{R} U$&lt;/p&gt;
&lt;h2 id=&#34;independence&#34;&gt;&lt;em&gt;Independence&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Two &lt;code&gt;events&lt;/code&gt; $A, B$ are independent &lt;strong&gt;iff&lt;/strong&gt;: $Pr[A \cap B] = Pr[A] \times Pr[B]$&lt;/li&gt;
&lt;li&gt;Two &lt;code&gt;random variables&lt;/code&gt; $A, B$ are independent &lt;strong&gt;iff&lt;/strong&gt; $\forall a \in V_A, b \in V_B$:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
Pr[A = a ,,\mathrm{and},, B = b] = Pr[A = a] \times Pr[B = b]
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For better understanding of independence, consider the example below:
Suppose a dice numbered by $D = {1, 2, \dots, 6}$ and 2 &lt;code&gt;random variables&lt;/code&gt; $A, B$:
$$ \begin{aligned}
&amp;amp;A:D \rightarrow {0, 1} &amp;amp;A(x) = [x \equiv 0 \pmod 2] \
&amp;amp;B:D \rightarrow {0, 1} &amp;amp;B(x) = [x \equiv 0 \pmod 3]
\end{aligned} $$
For uniform distribution of $D$, $A, B$ are obviously independent. Think about conditions below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$B(x) = [x \equiv 0 \pmod 4]$&lt;/li&gt;
&lt;li&gt;$D = {1, 2, \dots, 5}$&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;more-about-probability&#34;&gt;&lt;em&gt;More about Probability&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://crypto.stanford.edu/~blynn/pr/&#34;&gt;See also&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;i-pseudorandomness&#34;&gt;&lt;em&gt;I: Pseudorandomness&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Pseudorandomness&lt;/code&gt; measures the extent to which a sequence of numbers, though produced by a completely deterministic and repeatable process, appear to be patternless.&lt;/p&gt;
&lt;h2 id=&#34;pseudo-random-generator&#34;&gt;&lt;em&gt;Pseudo-random Generator&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;Pseudo-random Generator&lt;/code&gt;, or &lt;code&gt;PRG&lt;/code&gt; for short, is an efficient, deterministic algorithm $G$ that given as input a &lt;code&gt;seed&lt;/code&gt; $s$, computes an output $r$.
Both $s$ and $r$ come from a finite space, called $\mathcal{S}$ and $\mathcal{R}$ respectively.&lt;/p&gt;
&lt;p&gt;Typically $\mathcal{S}$ and $\mathcal{R}$ are sets of bit strings of some prescribed length. We can also regard $G$ as an abstract function defined over $\mathcal{(S, R)}$:&lt;/p&gt;
&lt;p&gt;$$
G: \mathcal{S} = {0, 1}^l \rightarrow \mathcal{R} = {0, 1}^L
$$&lt;/p&gt;
&lt;h3 id=&#34;security&#34;&gt;&lt;em&gt;Security&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;We say a PRG $G$ is secure if $G(s)$ and $r$ are &lt;strong&gt;computational indistinguishable&lt;/strong&gt;, among which $s$ is chosen uniform randomly from $\mathcal{S}$ and $r$ is chosen at random from $\mathcal{R}$.&lt;/p&gt;
&lt;p&gt;To illustrate &lt;strong&gt;computational indistinguishability&lt;/strong&gt;, the definition is formulated as an attack game:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;attack-game-prg-and-advantage&#34;&gt;&lt;em&gt;Attack Game (PRG) and Advantage&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;For a given PRG $G$ defined over $\mathcal{(S, R)}$,
and for a given adversary $\mathcal{A}$,
we define two experiments, Experiment $0$ and Experiment $1$:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Experiment&lt;/strong&gt; $b$:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Challenger computes $r \in \mathcal{R}$ as follows:
&lt;img src=&#34;http://localhost:1313/blog/img/PRG-ADV.png&#34; alt=&#34;PRG-ADV&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if $b = 0$, $s \xleftarrow{R} \mathcal{S}, r \leftarrow G(s)$&lt;/li&gt;
&lt;li&gt;if $b = 1$, $r \xleftarrow{R} \mathcal{R}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Given $r$, the adversary computes and outputs a bit $\hat{b} \in {0, 1}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For $b \in {0, 1}$, let $W_b$ be the event that $\mathcal{A}$ outputs $\hat{b} = 1$ in Experiment $b$. We define $\mathcal{A}$&amp;rsquo;s &lt;code&gt;advantage&lt;/code&gt; with respect to $G$ as&lt;/p&gt;
&lt;p&gt;$$
PRG_{adv} [\mathcal{A}, G] = \left|Pr[W_0] - Pr[W_1]\right|
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now we can define a PRG $G$ is &lt;strong&gt;secure&lt;/strong&gt; if the value $PRG_{adv} [\mathcal{A}, G]$ is negligible &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; for all efficient adversaries $\mathcal{A}$.&lt;/p&gt;
&lt;h2 id=&#34;pseudo-random-function&#34;&gt;&lt;em&gt;Pseudo-random Function&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;Pseudo-random Function(PRF)&lt;/code&gt; $F$ is a deterministic algorithm that has two inputs: a &lt;code&gt;key&lt;/code&gt; $k$ and an &lt;code&gt;input data block&lt;/code&gt; $x$; its output $y := F(k, x)$ is called an
&lt;code&gt;output data block&lt;/code&gt;. We denote the finite space of $k, x, y$ with $(\mathcal{K, X, Y})$, over which is $F$ defined.&lt;/p&gt;
&lt;p&gt;Intuitively, our notion of security says that for a randomly chosen key $k$, $F(k, \cdot )$ is indistinguishable from a random function from $\mathcal{X}$ to $\mathcal{Y}$&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;notation&#34;&gt;&lt;strong&gt;Notation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;$$
Funs[\mathcal{X, Y}] = {f: \mathcal{X} \rightarrow \mathcal{Y}}
$$
clearly we know that
$$
|Funs[\mathcal{X, Y}]| = |\mathcal{Y}|^{|\mathcal{X}|}
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;attack-game-prf&#34;&gt;&lt;em&gt;Attack Game (PRF)&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Similarly we can define two experiments, Experiment $0$ and $1$, for a PRF $F$ defined over $(\mathcal{K, X, Y})$:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Experiment&lt;/strong&gt; $b$:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The challenger selects $f$ as follows:
&lt;ul&gt;
&lt;li&gt;if $b = 0$, $k \xleftarrow{R} \mathcal{K}, f \leftarrow F(k, \cdot)$&lt;/li&gt;
&lt;li&gt;if $b = 1$, $f \xleftarrow{R} Funs[\mathcal{X, Y}]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The adversary $\mathcal{A}$ submits a sequence of queries $x_1, \dots, x_q$, and receives $y_i = f(x_i)$ for each $i$ from the challenger&lt;/li&gt;
&lt;li&gt;The adversary computes $\hat{b} \in {0, 1}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let $W_b$ be the event $\mathcal{A}$ outputs $1$ in Experiment $b$, the &lt;code&gt;advantage&lt;/code&gt; is also defined by:&lt;/p&gt;
&lt;p&gt;$$
PRF_{adv} [\mathcal{A}, F] = |Pr[W_0] - Pr[W_1]|
$$&lt;/p&gt;
&lt;p&gt;We say a PRF $F$ is &lt;strong&gt;secure&lt;/strong&gt; if all efficient adversary $A$ have a negligible advantage.&lt;/p&gt;
&lt;h2 id=&#34;pseudo-random-permutation&#34;&gt;&lt;em&gt;Pseudo-random Permutation&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Also called &lt;a href=&#34;#bc&#34;&gt;Block Cipher&lt;/a&gt;, is a special PRF which is also invertible.&lt;/p&gt;
&lt;h1 id=&#34;ii-cipher&#34;&gt;&lt;em&gt;II: Cipher&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;Throughout history, there were many ways of encryption, however, some of them have been proved unsafe. The question now is whether a particular &lt;code&gt;cipher&lt;/code&gt; is &lt;strong&gt;secure&lt;/strong&gt; and how to construct a &lt;strong&gt;secure&lt;/strong&gt; one.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;cipher&lt;/code&gt; defined over a triple $(\mathcal{K, M, C})$ is a pair of &lt;strong&gt;efficient&lt;/strong&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; algos $(E, D)$ where:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
E: \mathcal{K \times M} \rightarrow \mathcal{C} \
D: \mathcal{K \times C} \rightarrow \mathcal{M}
\end{aligned}
$$
s.t. $\forall m \in \mathcal{M}, k \in \mathcal{K}$
$$
m = D(k, E(k, m))
$$
and $\mathcal{K, M, C}$ denote the space of keys, messages and cipher texts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;stream-cipher&#34;&gt;&lt;em&gt;Stream Cipher&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;The example below shows the basic idea of stream cipher.&lt;/p&gt;
&lt;h3 id=&#34;otp&#34;&gt;&lt;em&gt;One Time Pad&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;An example cipher over $\mathcal{K, M, C} = {0, 1}^n$ and:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
E(k, m) &amp;amp;= k \oplus m \
D(k, c) &amp;amp;= k \oplus c \
\end{aligned}
$$&lt;/p&gt;
&lt;h2 id=&#34;perfect-secrecy&#34;&gt;&lt;em&gt;Perfect Secrecy&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;The basic idea behind perfect secrecy is: cipher text should reveal no &amp;ldquo;info&amp;rdquo; about plain text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;cipher&lt;/code&gt; $(E, D)$ over ${\mathcal{K, M, C}}$ has &lt;code&gt;perfect secrecy&lt;/code&gt; &lt;strong&gt;iff&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;$\forall m_0, m_1 \in \mathcal{M} ,,\mathrm{that},, |m_0| = |m_1|, c \in \mathcal{C}$:
$$Pr[E(k, m_0) = c] = Pr[E(k, m_1) = c]$$
where $k \xleftarrow{R} \mathcal{K}$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;rsquo;s not hard to see that when attacker gets a cipher text, he will have no idea what the plain text is. By definition, we can also prove &lt;a href=&#34;#otp&#34;&gt;One Time Pad&lt;/a&gt; has &lt;code&gt;perfect secrecy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, &lt;code&gt;perfect secrecy&lt;/code&gt; is too hard to satisfy because we have theorem says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a &lt;code&gt;cipher&lt;/code&gt; has &lt;code&gt;perfect secrecy&lt;/code&gt;, then:
$$|\mathcal{K}| \ge |\mathcal{M}|$$
which means the length of keys mustn&amp;rsquo;t less than length of messages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That somehow makes no sense for if we have some way sending and receiving such long keys secretly, then it&amp;rsquo;s absolutely unnecessary to use &lt;code&gt;cipher&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;stream-cipher-in-practice&#34;&gt;&lt;em&gt;Stream Cipher in Practice&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;However, &lt;code&gt;One Time Pad&lt;/code&gt; is not mainly used in practice because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The key space $\mathcal{K}$ is as large as message space $\mathcal{M}$, which makes no sense in communication.&lt;/li&gt;
&lt;li&gt;For two same message segments in different positions, they would also be same in the cipher text.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In practice, we have to change some details to solve these problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We can implement a &lt;code&gt;PRF&lt;/code&gt; $G$ with seed space $\mathcal{S}$ much less than the message space $\mathcal{M}$, and rewrite the process of encryption and decryption as:
$$
\begin{aligned}
E(k, m) &amp;amp;= G(k) \oplus m \
D(k, c) &amp;amp;= G(k) \oplus c
\end{aligned}
$$
By the properties of &lt;code&gt;PRF&lt;/code&gt; we could argue the security.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To solve this problem, we can change the key after a fixed length of message or using a nonce, the later one will appear in remain chapters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;bc&#34;&gt;&lt;em&gt;Block Cipher&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;block cipher&lt;/code&gt; defined over $(\mathcal{K, X})$ is a deterministic $(E, D)$ whose message space and cipher space is same (finite) set $\mathcal{X}$.
Additionally, for each $k \in \mathcal{K}$, it&amp;rsquo;s necessary that $E(k, \cdot)$ is invertible,
which also means $f_k := E(k, \cdot)$ is an one-to-one map on finite set $\mathcal{X}$ and $D(k, \cdot) = f_k^{-1}$.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not hard to see that $D(k, E(k, m)) = m$, so the point now is to argue the security of &lt;code&gt;block cipher&lt;/code&gt; (also called &lt;code&gt;Pseudo-random Permutation&lt;/code&gt;, &lt;code&gt;PRP&lt;/code&gt;).
Before that, let&amp;rsquo;s focus on the properties of invertible function on a finite set $\mathcal{X}$:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Some notation:
$$
Perm[\mathcal{X}] = {F \in Funs[\mathcal{X, X}] : F \text{ is invertible}}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obviously:
$$
|Perm[\mathcal{X}]| = |\mathcal{X}|!
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;attack-game-prp--security&#34;&gt;&lt;em&gt;Attack Game (PRP) &amp;amp; Security&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Similarly with the idea used in attacking &lt;code&gt;PRF&lt;/code&gt;,
we design an attack game for a certain &lt;code&gt;block cipher&lt;/code&gt; (or &lt;code&gt;PRP&lt;/code&gt;) $\mathcal{E} = (E, D)$ over $(\mathcal{K, X})$ against an attacker $\mathcal{A}$:&lt;/p&gt;
&lt;p&gt;Experiment $b$:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Challenger selects $f$ as follow&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if $b = 0$, $k \xleftarrow{R} \mathcal{K}, f = E(k, \cdot)$&lt;/li&gt;
&lt;li&gt;if $b = 1$, $f \xleftarrow{R} Perm[\mathcal{X}]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attacker choose a sequence of input $x_1, x_2, \dots, x_q$, and get $y_i = f(x_i)$ from the challenger.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attacker output a $\hat{b} \in {0, 1}$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The advantage is defined as:&lt;/p&gt;
&lt;p&gt;$$
BC_{ADV}[\mathcal{A, E}] = |Pr[W_0] - Pr[W_1]|
$$&lt;/p&gt;
&lt;p&gt;where $W_b$ describe the event that $\mathcal{A}$ outputs $\hat{b} = 1$ in Experiment $b$,
$\mathcal{E}$ is &lt;strong&gt;secure&lt;/strong&gt; if the advantage is negligible for all efficient algorithm $\mathcal{A}$.&lt;/p&gt;
&lt;h3 id=&#34;practice&#34;&gt;Practice&lt;/h3&gt;
&lt;p&gt;In practice, we often divide messages into &amp;ldquo;blocks&amp;rdquo;, then implement &lt;code&gt;block cipher&lt;/code&gt; to them and concate to get the cipher text.&lt;/p&gt;
&lt;h1 id=&#34;iii-message-integrity&#34;&gt;&lt;em&gt;III: Message Integrity&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;In previous chapters, we mainly focused on security against an eavesdropping adversary, which could not change messages en-route.
In this chapter we turn out attention to active adversaries by startting with the basic question of &lt;em&gt;message integrity&lt;/em&gt;: Bob receives a message $m$ from Alice,
and he wants to convince himself that the message was not modified en-route.&lt;/p&gt;
&lt;p&gt;Alice could send a extra tag $t$ of message $m$ to Bob, when Bob receives the pair $(m, t)$,
he can determine that by recalculating the tag of $m$ and then checking whether it is $t$.&lt;/p&gt;
&lt;h2 id=&#34;message-authentication-code-mac&#34;&gt;&lt;em&gt;Message Authentication Code (MAC)&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;MAC&lt;/code&gt; system $\mathcal{I} = (S,V)$ is a pair of efficient algorithms, $S$ and $V$, where $S$ is called a &lt;code&gt;signing algorithm&lt;/code&gt; and $V$ is called a &lt;code&gt;verification algorithm&lt;/code&gt;.
$S$ is used to generate tags and $V$ is to verify tags.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$S$ is a probabilistic algorithm that is invoked as $t \xleftarrow{R} S(k, m)$, where $k$ is a key, $m$ is a message.&lt;/li&gt;
&lt;li&gt;$V$ is a deterministic algorithm that is invoked as $r = V(k, m, t)$, where $k$ is a key, $m$ is a message, $t$ is a tag, and $r \in {0, 1}$&lt;/li&gt;
&lt;li&gt;For all keys and all messages:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
V(k, m, S(k, m)) = 1
$$&lt;/p&gt;
&lt;p&gt;As usual, we say that keys, messages and tags lie in some finite key space $\mathcal{K, M, T}$. We say that $\mathcal{I} = (S, V)$ is defined over $\mathcal{K, M, T}$.&lt;/p&gt;
&lt;h2 id=&#34;security-of-macs&#34;&gt;&lt;em&gt;Security of MACs&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Suppose an adversary is attacking a MAC system $\mathcal{I} = (S, V)$. Let $k$ be some randomly chosen MAC key, which is unknown to the attacker. We allow the attacker to request tags $t := S(k, m)$ for arbitrary messages $m$ of its choice. And the attacker need to come up with a &lt;em&gt;new&lt;/em&gt; pair $(m, t)$ satisfies $V(k, m, t) = 1$.&lt;/p&gt;
&lt;h1 id=&#34;iv-attack--security&#34;&gt;&lt;em&gt;IV: Attack &amp;amp; Security&lt;/em&gt;&lt;/h1&gt;
&lt;h1 id=&#34;v-public-key-cryptography&#34;&gt;&lt;em&gt;V: Public-key Cryptography&lt;/em&gt;&lt;/h1&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;LSB is a function which gets the last significant bit of a bit-string.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Negligible means small enough so that cannot be detected even by enormous samples.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Theoretically, efficient means runs in polynomial time; Practically it means runs within a certain time period.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;- http://localhost:1313/blog/posts/cryptography/ - Wearry &gt;_ 2023</description>
        </item>
    
    
    
        <item>
        <title>趣味数学题</title>
        <link>http://localhost:1313/blog/posts/exercise-of-thoughts/</link>
        <pubDate>Mon, 10 Feb 2020 22:04:22 +0000</pubDate>
        
        <guid>http://localhost:1313/blog/posts/exercise-of-thoughts/</guid>
        <description>Wearry&#39;s Blog http://localhost:1313/blog/posts/exercise-of-thoughts/ -&lt;h2 id=&#34;basel-series&#34;&gt;Basel Series&lt;/h2&gt;
&lt;p&gt;Calculate&lt;/p&gt;
&lt;p&gt;$$
\sum_{n=1}^{\infty} \frac{1}{n^2} = 1 + \frac{1}{2^2} + \frac{1}{3^2} + \dots
$$&lt;/p&gt;
&lt;h3 id=&#34;analytical-perspective&#34;&gt;Analytical Perspective&lt;/h3&gt;
&lt;p&gt;First notice that：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
I=&amp;amp;\int_0^1 \mathrm{d} x \int_0^1 \frac{1}{1-xy} \mathrm{d} y \\
=&amp;amp;\iint_D \sum_{i=0}^{\infty} (xy)^i \mathrm{d}x\mathrm{d}y \\
=&amp;amp;\sum_{i=0}^{\infty} \iint_D (xy)^i \mathrm{d}x\mathrm{d}y \\
=&amp;amp;\sum_{i=0}^{\infty} \left(\int_0^1 x^i \mathrm{d} x\right)^2 \\
=&amp;amp;\sum_{i=1}^{\infty} \frac{1}{i^2}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Now just need to calculate \(I\)，replace variables：&lt;/p&gt;
&lt;p&gt;$$
\begin{cases}
x = u + v \\
y = u - v
\end{cases},
\frac{\partial(x, y)}{\partial(u, v)} = \left|\begin{matrix} 1 &amp;amp; 1 \\ 1 &amp;amp; -1 \end{matrix} \right| = -2
$$&lt;/p&gt;
&lt;p&gt;then：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
I &amp;amp;= 2 \iint_{D_{uv}} \frac{1}{1 - u^2 + v^2} \mathrm{d} u \mathrm{d} v \\
&amp;amp;= 4 \left(\int_0^{\frac{1}{2}} \mathrm{d} u \int_0^{u} \frac{1}{1-u^2+v^2} \mathrm{d} v + \int_{\frac{1}{2}}^{1} \mathrm{d}u \int_0^{1-u} \frac{1}{1-u^2+v^2} \mathrm{d} v\right) \\
&amp;amp;= 4 \left(\int_0^{\frac{1}{2}} \frac{1}{\sqrt{1-u^2}} \arctan \frac{u}{\sqrt{1-u^2}} \mathrm{d} u + \int_{\frac{1}{2}}^{1} \frac{1}{\sqrt{1-u^2}} \arctan \frac{1-u}{\sqrt{1-u^2}} \mathrm{d} u\right) \\
&amp;amp;= 4 \left(\int_0^{\frac{1}{2}} \arctan \frac{u}{\sqrt{1-u^2}} \mathrm{d} \arctan \frac{u}{\sqrt{1-u^2}}
-2       \int_{\frac{1}{2}}^1 \arctan \frac{1-u}{\sqrt{1-u^2}} \mathrm{d} \arctan \frac{1-u}{\sqrt{1-u^2}} \right) \\
&amp;amp;= 4 \times \frac{1}{2} \times \left(\frac{\pi}{6}\right)^2 + 4 \times \left(\frac{\pi}{6}\right)^2 = \frac{\pi^2}{6} \\
&amp;amp;&amp;amp; \square
\end{aligned}
$$&lt;/p&gt;
&lt;h3 id=&#34;algebraic-perspective&#34;&gt;Algebraic Perspective&lt;/h3&gt;
&lt;p&gt;From Taylor&amp;rsquo;s series, we know that:&lt;/p&gt;
&lt;p&gt;$$
\sin(x) = x - \frac{x^3}{3!} + \frac{x^5}{5!} - \dots
$$&lt;/p&gt;
&lt;p&gt;Let:&lt;/p&gt;
&lt;p&gt;$$
f(x) = \frac{\sin(x)}{x} = 1 - \frac{x^2}{3!} + \frac{x^4}{5!} - \dots
$$&lt;/p&gt;
&lt;p&gt;Obviously the roots of \(f(x)\) are \(n\pi, n \in \mathbb{Z} \backslash {0}\), hence:&lt;/p&gt;
&lt;p&gt;$$
f(x) = (1 - \frac{x}{\pi})(1 + \frac{x}{\pi})(1 - \frac{x}{2\pi})(1 + \frac{x}{2\pi})\dots
$$&lt;/p&gt;
&lt;p&gt;Consider the coeficient of \(x^2\), we have:&lt;/p&gt;
&lt;p&gt;$$
-\left(\frac{1}{\pi^2} + \frac{1}{(2\pi)^2} + \frac{1}{(3\pi)^2} + \dots\right) = -\frac{1}{3!}
$$&lt;/p&gt;
&lt;p&gt;Which also shows that:&lt;/p&gt;
&lt;p&gt;$$
\sum_{n=1}^{\infty} \frac{1}{n^2} = \frac{\pi^2}{6}
$$&lt;/p&gt;
&lt;h3 id=&#34;application&#34;&gt;Application&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;What&amp;rsquo;s the probability that any two arbitrary positive integers are &lt;strong&gt;relatively prime&lt;/strong&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For any prime \(p\)，those integers won&amp;rsquo;t be &lt;strong&gt;relatively prime&lt;/strong&gt; if they are both multiples of \(p\), thus the probability is:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
P &amp;amp;= \prod_{p, \mathrm{is\ prime}} \left(1 - \frac{1}{p^2}\right) \
&amp;amp;= \prod_{p, \mathrm{is\ prime}} \cfrac{1}{\displaystyle \sum_{i=0}^{\infty} \left(\cfrac{1}{p^2}\right)^i} \
&amp;amp;= \frac{1}{\displaystyle \sum_{i=1}^{\infty} \frac{1}{i^2}} \
&amp;amp;= \frac{6}{\pi^2}
\end{aligned}
$$&lt;/p&gt;
&lt;h2 id=&#34;birthday-paradox&#34;&gt;Birthday Paradox&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;There are \(k\) people whose birthdays are among set \(B\) with size \(n\),
the probability that there are &lt;strong&gt;at least&lt;/strong&gt; a pair of people have the same birthday is greater than \(\frac{1}{2}\) when \(k \ge 1.2 \sqrt{n} + 1\)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;proof&#34;&gt;Proof&lt;/h3&gt;
&lt;p&gt;Suppose each person&amp;rsquo;s birthday is &lt;strong&gt;independent uniform&lt;/strong&gt; in \(B\),
then the probability that don&amp;rsquo;t exist such a pair is:&lt;/p&gt;
&lt;p&gt;$$
P = \prod_{i=0}^{k-1} \left(1 - \frac{i}{n}\right)
$$&lt;/p&gt;
&lt;p&gt;to prove \(P \le \frac{1}{2}\), we use the result in analysis that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;\(\forall x \in \mathbb{R}, 1 + x \le \mathrm{e}^x\)
&lt;img src=&#34;http://localhost:1313/blog/images/exp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;then:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
P &amp;amp;\le \exp \left(\sum_{i=0}^{k-1} -\cfrac{i}{n}\right) \\
&amp;amp;\le \exp \left(-\frac{(k-1)^2}{2n}\right) \\
&amp;amp;\le \exp \left(-\frac{(1.2 \sqrt{n})^2}{2n}\right) \\
&amp;amp;= \exp(-0.72) &amp;lt; \frac{1}{2} \
\end{aligned}
$$&lt;/p&gt;
- http://localhost:1313/blog/posts/exercise-of-thoughts/ - Wearry &gt;_ 2023</description>
        </item>
    
    
    
        <item>
        <title>互测题总结</title>
        <link>http://localhost:1313/blog/posts/problem-select/</link>
        <pubDate>Tue, 02 Oct 2018 10:58:09 +0000</pubDate>
        
        <guid>http://localhost:1313/blog/posts/problem-select/</guid>
        <description>Wearry&#39;s Blog http://localhost:1313/blog/posts/problem-select/ -&lt;h2 id=&#34;string&#34;&gt;String&lt;/h2&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;称一个仅由&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;组成的字符串 \(S\) 是平衡的当且仅当对于 \(S\) 的任意一个连续子串 \(T\), 任意两种字符的出现次数之差都小于等于 \(k\), 求长度为 \(n\) 的平衡串的数量.&lt;/p&gt;
&lt;p&gt;\(n \le 10^9, K \le 8\)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;定义 \(f_{a, b}(i)\) 表示在前 \(i\) 个字符中 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 出现次数之差, 在只考虑 &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; 两种字符的条件等价于:&lt;/p&gt;
&lt;p&gt;$$\max_{i=1}^{n} f_{a, b}(i) - \min_{i=1}^{n} f_{a, b}(i) \le k$$&lt;/p&gt;
&lt;p&gt;注意到如果 \(f_{a, b}\) 的值域区间长度为 \(l\), 则被所有长度为 \(k\) 的值域区间计算的次数是 \(k - l + 1\).
记 \(g(x, y, z)\) 表示三种 \(f\) 的值域区间长度限制分别为 \(x, y, z\) 时的方案数, 那么可以容斥计算答案:&lt;/p&gt;
&lt;p&gt;$$ans = g(k, k, k) - 3 g(k, k, k-1) + 3 g(k, k-1, k-1) - g(k-1, k-1, k-1)$$&lt;/p&gt;
&lt;p&gt;考虑如何计算 \(g(x, y, z)\), 以 \(x\) 为例, 每一个合法的区间一定可以表示成 \(s_x + l_x \mid l_x \in [0, x]\) 的形式.&lt;/p&gt;
&lt;p&gt;因为初始状态的 \(l\) 确定了 \(s\) , 接下来的转移只需要保证 \(l\) 的范围即可, 由于:&lt;/p&gt;
&lt;p&gt;$$f_{a, b}(i) - f_{a, c}(i) = f_{c, b}(i)$$&lt;/p&gt;
&lt;p&gt;考虑对于 \(z\) 的限制, 有:&lt;/p&gt;
&lt;p&gt;$$s_z + s_y - s_x \le l_x - l_y \le s_z + s_y - s_x + l_z$$&lt;/p&gt;
&lt;p&gt;每次转移之前枚举一下 \(s_z + s_y - s_x\) 即可, 这样状态只需要考虑 \(l_x, l_y\) 即可, 并且初始状态唯一确定 \(s_x, s_y, s_z\).&lt;/p&gt;
&lt;h2 id=&#34;sequence&#34;&gt;Sequence&lt;/h2&gt;
&lt;h3 id=&#34;description-1&#34;&gt;Description&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;对长度为 \(n\) 的序列 \(\{a_i\}\), 定义 \(\text{sum}(l, r)\) 为第 \(l\) 到 \(r\) 项的元素之和, \(\text{inc}(l, r)\) 为第 \(l\) 到 \(r\) 项的非空上升子序列的最大权值和, 求 \(\max_{1 \le l,, r \le n} \text{sum}(l, r) - \text{inc}(l, r)\), 以及同时满足区间长度最小的 \((l, r)\) 的数量.&lt;/p&gt;
&lt;p&gt;\(n \le 2 \times 10^5, |a_i| \le 40\)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;solution-1&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;由于权值的范围比较小, \(\text{inc}\) 的范围也不大, 同时一定存在方案使得 \(\text{inc}\) 中只包含正数.&lt;/p&gt;
&lt;p&gt;考虑从左到右枚举右端点, 由于最小化区间长度的需要, 记录 \(dp(i, j)\) 表示右边界不超过当前枚举的位置, 最长上升子序列的权值和为 \(i\) 且最后一位的权值为 \(j\) 时最靠右的左端点的位置. 转移可以做到 \(O(n |a_i|^3)\)&lt;/p&gt;
&lt;p&gt;接下来考虑计算答案, 从大到小枚举 \(\text{inc}\) 可能的值, 并求其最靠右的左端点如果左端点是单调增的则说明选择中间这部分的左端点 \(\text{inc}\) 会发生变化, 找一个能最优化 \(\text{sum}\) 的同时区间长度最小的左端点即可.&lt;/p&gt;
&lt;h2 id=&#34;game&#34;&gt;Game&lt;/h2&gt;
&lt;h3 id=&#34;description-2&#34;&gt;Description&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;\(n\) 个人在一起玩游戏每个人初始有一张牌, 牌上的数字构成一个 \(1-n\) 的排列, 所有人从左到右进行决策: 翻开自己的牌并留在原地, 或者选一个之前的人与其交换手中的牌并离开游戏, 之前的人将他的牌翻开. 每个人都会采取最佳策略, 并希望自己手中的牌上的数字尽可能大. 定义 \(E(n)\) 为 \(n\) 个人进行游戏最后留在原地的人的数量的期望.&lt;/p&gt;
&lt;p&gt;$$ \begin{aligned} S_k(n) = \begin{cases}
E(n)  &amp;amp; \text{k = 0} \\
\sum_{i=1}^{n} S_{k-1}(i) &amp;amp; \text{otherwise} \
\end{cases}
\end{aligned} $$&lt;/p&gt;
&lt;p&gt;求 \(S_k(n)\), 保留 10 位有效数字.&lt;/p&gt;
&lt;p&gt;\(k \le 50, n \le 10^{15}\)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;solution-2&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;首先需要分析每个人的策略, 已知的信息有两部分, 留在原地的人手中的数字集合\(P\), 没有进行决策的人手中的数字集合\(R\).
证明最优策略下发生交换当且仅当 \(\min\{R\} \lt \max\{P\}\).&lt;/p&gt;
&lt;p&gt;不妨使用数学归纳法证明, 对于最后一个做决策的人, 决策正确性显然, 考虑剩下的人:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当 \(\min\{R\} &amp;gt; \max\{P\}\) 时, 显然翻开手中的牌无论如何都不会再劣于 \(\max\{P\}\).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 \(\min\{R\} \lt \max\{P\}\) 时, 考虑反证翻开当前的牌不会比 \(\max{P}\) 更优:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果翻开的牌优于 \(\max\{P\}\), 由于在这之前有 \(\min\{R\} \lt \max\{P\}\), 在最小值被翻出之前接下来的人都会选择与最大的位置交换, 如果最大值所在的位置没有发生变化这个位置最后会变成 \(\min\{R\}\) 且不会有人再和他交换手中的牌, 否则这个位置需要先变得小于原本的 \(\max\{P\}\).&lt;/li&gt;
&lt;li&gt;如果翻开的牌劣于 \(\max\{P\}\) 则类似上述情况中先变得小于原本 \(\max\{P\}\) 的情况, 每一个完整过程中要么 \(\max\{P\}\) 变成 \(\min\{R\}\), 要么 \(\max\{P\}\) 的位置发生变化, 最终一定都会劣于最初的 \(\max\{P\}\).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来考虑 \(E(n)\), 第 \(i\) 个人选择留在原地当且仅当第 \(i-1\) 个人手中的牌恰好是后缀最小值, 于是:&lt;/p&gt;
&lt;p&gt;$$E(n) = \sum_{i=1}^{n} \frac{1}{i}$$&lt;/p&gt;
&lt;p&gt;考虑生成函数:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
F(x) &amp;amp;= \sum_{i=1}^{\infty} \frac{1}{i} x^i \\
&amp;amp;= \int \frac{1}{1 - x} \\
&amp;amp;= -\ln(1 - x)
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
E(x) &amp;amp;= \frac{F(x)}{1 - x} \\
&amp;amp;= \frac{-\ln(1 - x)}{1 - x}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;接下来计算 \(S_k(n)\):&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
S_k(x) &amp;amp;= \frac{S_{k-1}(x)}{1 - x} \\
&amp;amp;= \frac{-\ln(1 - x)}{(1 - x)^{k + 1}} \\
S_k&amp;rsquo;(x) &amp;amp;= \frac{(-\ln(1-x))&amp;rsquo;}{(1-x)^{k + 1}} - \ln(1 - x) \left( \frac{1}{(1 - x)^{k+1}} \right)&amp;rsquo; \\
&amp;amp;= \frac{1}{(1 - x)^{k + 2}} - \ln(1 - x) \left( -\frac{1}{(1 - x)^{2k + 2}} ((1-x)^{k+1})&amp;rsquo; \right) \\
&amp;amp;= \frac{1}{(1 - x)^{k + 2}} - \ln(1 - x) \frac{(k + 1) (1 - x)^k}{(1 - x)^{2k+2}} \\
&amp;amp;= \frac{1}{(1 - x)^{k + 2}} + (k + 1) S_{k+1}(x)
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;考虑 \(x^n\) 项的系数:&lt;/p&gt;
&lt;p&gt;$$(n+1)S_k(n+1)x^n = {n + k + 2 \choose k + 1}x^n + (k + 1) S_{k + 1}(n) x^n$$&lt;/p&gt;
&lt;p&gt;$$S_{k+1}(n) = \frac{(n+1)S_k(n+1) - {n + k + 2 \choose k + 1}}{k + 1}$$&lt;/p&gt;
&lt;p&gt;对于 \(S_0(n)\), 使用调和级数的近似公式计算, 否则递归即可.&lt;/p&gt;
&lt;h2 id=&#34;power&#34;&gt;Power&lt;/h2&gt;
&lt;h3 id=&#34;description-3&#34;&gt;Description&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;\(n\) 个连续随机变量, 第 \(i\) 个变量 \(x_i\) 在 \([l_i, r_i]\) 中均匀随机, 求 \(\max{ (\sum{x_i})^m, a^m }\) 的期望值对 \(998244353\) 取模的结果.&lt;/p&gt;
&lt;p&gt;\(n \le 15, m \le 10^8, |a|, |l_i|, |r_i| \le 10^6\)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;solution-3&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;连续概率实际上是合法的点集在 \(n\) 维超立方体中的体积占比, 点集内部用积分计算期望即可. 对于 \([0, \infty)\) 范围内的 \(n\) 个连续随机变量 \(\{x_i\}\), 不难归纳得到满足 \(\sum x_i \le x\) 的点构成的 \(n\) 维超几何体在 \(n\) 维空间中的体积是 \(\frac{x^n}{n!}\).&lt;/p&gt;
&lt;p&gt;考虑 \(\sum{x_i}\) 和 \(a\) 的大小关系.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(m\) 为奇数时, 需要考虑两个区间, \([-\infty, a], [a, \infty]\).&lt;/li&gt;
&lt;li&gt;\(m\) 为偶数时, 需要计算三个区间的答案, \([-\infty, -a], [-a, a], [a, \infty]\).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么要计算在每个区间内部的期望值, 考虑将每个 \(x_i\) 表示为 \(l_i + y_i\) 或 \(r_i + y_i\), \(2^n\) 枚举所有不合法的变量集合进行容斥, 对于 \(\sum y_i \le K\) 的限制可以转化成计算:&lt;/p&gt;
&lt;p&gt;$$\int_{0}^{K} \frac{x^{n-1}}{(n-1)!} g(x) \mathrm{d}x$$&lt;/p&gt;
&lt;p&gt;\(g(x)\) 表示当 \(\sum y_i = x\) 时的答案, 同一个区间内的形式是相同的.&lt;/p&gt;
&lt;p&gt;对于 \(\sum y_i \ge K\) 的限制可以反过来将每个 \(x_i\) 表示为 \(r_i - y_i\) 或者 \(l_i - y_i\), 限制 \(-\sum y_i \ge K\) 可以转化为 \(\sum y_i \le K\) 的形式.&lt;/p&gt;
&lt;h2 id=&#34;bizi&#34;&gt;Bizi&lt;/h2&gt;
&lt;h3 id=&#34;description-4&#34;&gt;Description&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给出两棵有根树, 大小分别是 \(n_1, n_2\), 可以进行三种操作:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改: 将一条边的边权从 \(x\) 改为 \(y\) , 代价为 \(|x - y| \times c1\).&lt;/li&gt;
&lt;li&gt;收缩: 选择一个点, 将它的所有子树连向他的父亲, 代价为这个点到父亲的边权 \(w \times c2\).&lt;/li&gt;
&lt;li&gt;生长: 选择任意一个点的一段连续的子树, 插入一个新点连向选择的点并成为这些子树的父亲, 代价为连向原来的点的边权 \(w \times c2\).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;求出使得两颗树括号序列和边权相同需要的最小代价.&lt;/p&gt;
&lt;p&gt;\(n_1 \le 50, n_2 \le 2000\)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;solution-4&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;首先不难发现操作一和操作二互为逆操作, 所以可以只考虑操作二.&lt;/p&gt;
&lt;p&gt;定义 \(dp(a, b, c, d)\) 表示第一颗树中 \([a, b]\) 表示的括号序列区间和第二棵树中 \([c, d]\) 表示的括号序列区间变得相同需要的最小代价, 考虑左端点对应的括号在最终情况下的匹配情况进行转移:&lt;/p&gt;
&lt;p&gt;$$
dp(a, b, c, d) = \min \begin{cases}
dp(a + 1, b, c, d) + w_{a} \times c2 \\
dp(a, b, c + 1, d) + w_{c} \times c2 \\
dp(a + 1, p_{a} - 1, b + 1, p_{b} - 1) + dp(p_{a} + 1, b, p_{c} + 1, d) + |w_{a} - w_{b}| \times c1
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;\(p_x\) 表示第 \(x\) 个括号的匹配括号的位置, \(w_x\) 表示第 \(x\) 个括号和其父亲结点之间连边的边权.&lt;/p&gt;
&lt;p&gt;看起来状态数是 \(O(n_1^2n_2^2)\) 的, 实际上分析后发现有用的状态数只有 \(O(n_1^2n_2\log{n_2})\):
因为考虑左端点进行转移和考虑右端点进行转移是等价的, 但是如果每次都选择第二棵树中子树大小较小的一侧进行转移, 关于第二棵树的状态数就是轻儿子的子树大小之和, 而这个值是不会超过 \(O(n_2 \log{n_2})\) 的.&lt;/p&gt;
&lt;h2 id=&#34;circle&#34;&gt;Circle&lt;/h2&gt;
&lt;h3 id=&#34;description-5&#34;&gt;Description&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;平面上有 \(n\) 个点, 求有多少个无序三元组 \((i, j, k)\) 满足点 \(i, j, k\) 确定的圆经过坐标原点.&lt;/p&gt;
&lt;p&gt;\(n \le 2000\)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;solution-5&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;西姆松定理:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三个点确定的圆上任选一点向这三个点构成的三角形三边所在直线分别作垂线, 垂足三点共线.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;证明可参考下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/images/simson.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;于是问题转化为求三点共线的数量.&lt;/p&gt;
&lt;h2 id=&#34;triangle&#34;&gt;Triangle&lt;/h2&gt;
&lt;h3 id=&#34;description-6&#34;&gt;Description&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;有一棵 \(n\) 个点的树, 初始时树上没有石子, 可以进行若干次如下操作:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果点 \(u\) 的所有子树 \(v\) 上都恰好有 \(w_v\) 颗石子, 则可以从手中拿出 \(w_u\) 颗石子放在点 \(u\) 上.&lt;/li&gt;
&lt;li&gt;将某个结点上的所有石子收回手中.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在询问你对于每一个点 \(i\), 要使得 \(i\) 上恰好放有 \(w_i\) 颗石子, 初始时手中至少需要多少颗石子.&lt;/p&gt;
&lt;p&gt;\(n \le 10^5, w_i \le 10^9\)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;solution-6&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;首先可以发现操作的过程类似一个拓扑排序, 填上一个结点的石子之前先要将它的所有儿子都填上石子, 接着会立即收回儿子结点上的石子.&lt;/p&gt;
&lt;p&gt;不妨反过来考虑, 定义一次操作为选择一个放有石子的点, 将它的儿子结点全部放上石子, 然后收回这个点的石子. 由于只需要考虑操作过程中石子数量的最大值, 可以发现反转顺序并不会影响答案.&lt;/p&gt;
&lt;p&gt;用一个二元组 \((a, b)\) 描述一次操作, \(a, b\) 分别表示在操作的过程中石子的总变化量和变化最大值, 注意到两个操作可以方便地合并:&lt;/p&gt;
&lt;p&gt;$$
(a, b) + (c, d) = (a + c, \max\{b, a + d\})
$$&lt;/p&gt;
&lt;p&gt;接下来考虑二元组 \(X = (a, b)\) 和 \(Y = (c, d)\) 之间的优先级, 不难得到以下优先级规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;\(a \times c \lt 0\) 时, 总变化量小于 \(0\) 的二元组优先级更高.&lt;/li&gt;
&lt;li&gt;\(a \lt 0 , c \lt 0\) 时, 变化最大值较小的二元组优先级更高.&lt;/li&gt;
&lt;li&gt;\(a &amp;gt; 0 , c &amp;gt; 0\) 时, 总变化量减去变化最大值较小的二元组优先级更高.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上规则也可利用交换法证明正确性. 又因为任意两个二元组合并得到的新二元组不会比原来的两个二元组都更优, 所以全局最优的二元组在可以选择的时候一定会马上选择, 于是得到一个贪心策略, 每次选择最优的二元组并将其和父亲当前对应的二元组进行合并, 可以发现这样能够得到整棵树的操作序列.&lt;/p&gt;
- http://localhost:1313/blog/posts/problem-select/ - Wearry &gt;_ 2023</description>
        </item>
    
    
    
        <item>
        <title>拓展埃氏筛法小结</title>
        <link>http://localhost:1313/blog/posts/ex-eratos-sieve/</link>
        <pubDate>Tue, 21 Aug 2018 19:42:41 +0000</pubDate>
        
        <guid>http://localhost:1313/blog/posts/ex-eratos-sieve/</guid>
        <description>Wearry&#39;s Blog http://localhost:1313/blog/posts/ex-eratos-sieve/ -&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;求:&lt;/p&gt;
&lt;p&gt;$$h(n) = \sum_{i=1}^{n} f(i)$$&lt;/p&gt;
&lt;p&gt;其中 \(f\) 是定义在正整数集下的积性函数, 满足 \(f(p^c)\) 能够快速计算.&lt;/p&gt;
&lt;h2 id=&#34;conversion&#34;&gt;Conversion&lt;/h2&gt;
&lt;p&gt;首先可以将所有要求的数按照是否只含大于 \(\sqrt{n}\) 的质因子分为两类, 对于第一类数一定是一个质数, 而第二类数一定可以在某个较小的质因子处考虑到, 于是我们只关注不超过 \(\sqrt{n}\) 的那些质因子.&lt;/p&gt;
&lt;p&gt;定义 \(S_k(n, i)\) 表示小于等于 \(n\) 的数中与前 \(i\) 个质数互质的所有数与&lt;strong&gt;所有质数&lt;/strong&gt;的 \(k\) 次方和, 容易得到转移:&lt;/p&gt;
&lt;p&gt;$$
S_k(n, i) =
\begin{cases}
S_k(n, i-1) &amp;amp; n &amp;lt; p_i^2 \\
S_k(n, i-1) - p_i^k \times \left(S_k(\left \lfloor \frac{n}{p_i} \right \rfloor, i - 1) - S_k(p_{i-1}, i - 1)\right) &amp;amp; \mathrm{otherwise}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;在考虑完 \(\sqrt{n}\) 以内的所有质因数后, \(S_k(n)\) 中留下了所有质数的 \(k\) 次方, 这样所有第一类数的函数值都可以快速计算.&lt;/p&gt;
&lt;p&gt;类似地, 定义 \(G(n, i)\) 表示小于等于 \(n\) 的数中仅由第 \(i\) 个以后的质数构成的数与&lt;strong&gt;所有质数&lt;/strong&gt; \(x\) 的 \(f(x)\) 之和, 转移的方式类似:&lt;/p&gt;
&lt;p&gt;$$
G(n, i) = G(n, i+1) + \sum_{c=0}^{\substack{p_i^{c+1} \le n}} f(p_i^{c+1}) + f(p_i^c) \times \left(G(\left \lfloor \frac{n}{p_i^c} \right \rfloor, i+1) - G(p_i, i+1)\right)
$$&lt;/p&gt;
&lt;p&gt;复杂度约为 \(O\left(\frac{n^{\frac{3}{4}}}{\log{n}}\right)\)&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span&gt;ll n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span&gt;uint val[M &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; prime[M &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], pcnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span&gt;uint s[M &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], S[M &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span&gt;uint f[M &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], F[M &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; uint &lt;span style=&#34;color:#a6e22e&#34;&gt;gets&lt;/span&gt;(ll x) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; s[x] &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; S[n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; x]; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; uint &lt;span style=&#34;color:#a6e22e&#34;&gt;getf&lt;/span&gt;(ll x) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; f[x] &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; F[n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; x]; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_sqrt&lt;/span&gt;(ll x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1ll&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; r;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;(ll _n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;&lt;span&gt;  m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; my_sqrt(n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _n);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;&lt;span&gt;    val[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;&lt;span&gt;    s[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;&lt;span&gt;    S[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;p) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(s[p] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; s[p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;&lt;span&gt;    prime[pcnt &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; uint _s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ll q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1ll&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p, lim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min((ll) m, n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; q), x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; p, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) S[i] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; S[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; _s;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; lim; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) S[i] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; s[y &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; _s;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; q; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i) s[i] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; s[i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; p] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; _s;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38&lt;/span&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40&lt;/span&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41&lt;/span&gt;&lt;span&gt;    f[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42&lt;/span&gt;&lt;span&gt;    F[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43&lt;/span&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45&lt;/span&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pcnt; e &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prime[e&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ll q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1ll&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p, lim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min((ll) m, n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; q);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; lim; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50&lt;/span&gt;&lt;span&gt;      ll cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51&lt;/span&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(ll t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p, c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; cur; t &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; p, &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52&lt;/span&gt;&lt;span&gt;        F[i] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (getf(cur &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; t) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; val[c] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; val[c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53&lt;/span&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54&lt;/span&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; q; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57&lt;/span&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58&lt;/span&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p, c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; t &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; p; t &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; p, &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59&lt;/span&gt;&lt;span&gt;        f[i] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (getf(cur &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; t) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; val[c] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; val[c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60&lt;/span&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61&lt;/span&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62&lt;/span&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- http://localhost:1313/blog/posts/ex-eratos-sieve/ - Wearry &gt;_ 2023</description>
        </item>
    
    
    
        <item>
        <title>记NOI2018</title>
        <link>http://localhost:1313/blog/posts/noi2018/</link>
        <pubDate>Mon, 30 Jul 2018 08:38:56 +0000</pubDate>
        
        <guid>http://localhost:1313/blog/posts/noi2018/</guid>
        <description>Wearry&#39;s Blog http://localhost:1313/blog/posts/noi2018/ -&lt;h2 id=&#34;day--1&#34;&gt;Day -1&lt;/h2&gt;
&lt;p&gt;上午在家无所事事, 收了下行李, 下午就到洋湖报到去了, 然后听说笔试时间调整到了上午, 感觉有点慌整个晚上都在背笔试.&lt;/p&gt;
&lt;h2 id=&#34;day-0&#34;&gt;Day 0&lt;/h2&gt;
&lt;p&gt;上午考笔试, 比预料中的简单很多, 没有什么快捷键之类的坑题也没有挂分, 试机就打了一个最简单的配置就跑了.&lt;/p&gt;
&lt;p&gt;下午找了一间教室自习, 不知道干什么, 晚上懒得复习什么早早地睡了, 奇怪的是居然丝毫不紧张.&lt;/p&gt;
&lt;h2 id=&#34;day-1&#34;&gt;Day 1&lt;/h2&gt;
&lt;p&gt;第一试, 看了看题, 觉得题意都挺好理解的, 难度也基本按照题目顺序.&lt;/p&gt;
&lt;p&gt;就直接开始写T1了, 写完 \(\log^2\) 过了大样例直接丢到一边了, 然后看T2, 推了一个看起来有理有据的结论, 但不是很会算答案搞了很久大样例四个全错, 想了一下随便打了个特判过了其中两个, 又改了一下特判才在考试一半时间的时候过了大样例.&lt;/p&gt;
&lt;p&gt;期间去上了一个厕所, 用掉20min&amp;hellip;&lt;/p&gt;
&lt;p&gt;看T3惊喜地发现68分没啥难度, 飞快地码完过了大样例还有一个半小时, 正准备回去继续做T2最后20分的时候发现T1可能跑不过, 卡了很久的常, 期间竟然检查出好多致命的错误, 然后心里特别虚地不停检查, T2也没有继续想了.&lt;/p&gt;
&lt;p&gt;好在最后并没有挂分.&lt;/p&gt;
&lt;h2 id=&#34;day-15&#34;&gt;Day 1.5&lt;/h2&gt;
&lt;p&gt;鸽了社会活动, 在自习室打出了防沉迷警告&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;day-2&#34;&gt;Day 2&lt;/h2&gt;
&lt;p&gt;看完题目一直在想哪道题最简单, 然后T1补充了一个条件&amp;hellip;&lt;/p&gt;
&lt;p&gt;用了两个小时都没有从T1的倒数第二步推出最后一步, 想想当时可能真的受到了降智打击, 还自信地觉得T2比较可做, 码了很久发现是假算法, 感觉很慌跑去写T3暴力, 回来想先写T2的45分又不想放弃T1, 最后连T2的45分都没拿到&amp;hellip;&lt;/p&gt;
&lt;p&gt;感觉心态很崩, 虽然最后查分发现意外的多了5分(大雾).&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;好像不知从什么时候开始, 身上一直有某种二试Debuff存在, 可能经常性的因为第一试考得不错, 而对多数情况下更难的二试心存轻视, 也没能调整好自己的心态吧.&lt;/p&gt;
&lt;p&gt;不管怎样, 接下来的OI生涯, 要更加珍惜!&lt;/p&gt;
- http://localhost:1313/blog/posts/noi2018/ - Wearry &gt;_ 2023</description>
        </item>
    
    
  </channel>
</rss> 